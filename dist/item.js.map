{"version":3,"sources":["../src/item.js"],"names":["AccordionItem","props","handleElementClick","e","isOpen","state","open","setState","rootElement","style","height","baseRowHeight","contentElement","clientHeight","id","title","html","activeLabel","inactiveLabel","c","labelElement","React","cloneElement","minusSymbolSVG","className","toggleIconStyle","plusSymbolSVG","Component"],"mappings":";;;;;;;;AAAA;;;;AACA;;AACA;;AACA;;;;;;;;;;IAWMA,a;;;AAEJ,yBAAYC,KAAZ,EAAmB;AAAA;;AAAA,8HACXA,KADW;;AAAA,UAOnBC,kBAPmB,GAOE,UAACC,CAAD,EAAO;AAC1B,UAAIC,SAAS,CAAC,MAAKC,KAAL,CAAWC,IAAzB;AACA,YAAKC,QAAL,CAAc;AACZD,cAAMF;AADM,OAAd;AAGA,YAAKI,WAAL,CAAiBC,KAAjB,CAAuBC,MAAvB,GAAgCN,SAAYO,0BAAgB,MAAKC,cAAL,CAAoBC,YAAhD,UAC3BF,uBAD2B,OAAhC;AAED,KAdkB;;AAEjB,UAAKN,KAAL,GAAa;AACXC,YAAM;AADK,KAAb;AAFiB;AAKlB;;;;6BAWQ;AAAA;;AAAA,UACCA,IADD,GACU,KAAKD,KADf,CACCC,IADD;AAAA,mBAMH,KAAKL,KANF;AAAA,UAGLa,EAHK,UAGLA,EAHK;AAAA,UAILC,KAJK,UAILA,KAJK;AAAA,UAKLC,IALK,UAKLA,IALK;AAAA,oBAUH,KAAKf,KAVF;AAAA,UAQLgB,WARK,WAQLA,WARK;AAAA,UASLC,aATK,WASLA,aATK;;;AAYP,UAAI,CAACD,WAAL,EAAkB;AAAEA,sBAAc,OAAd;AAAsB;AAC1C,UAAI,CAACC,aAAL,EAAoB;AAAEA,wBAAgB,MAAhB;AAAuB;;AAE7C,aACE;AAAC,oBAAD;AAAA;AACE,oBAAU;AAAA,mBAAK,OAAKV,WAAL,GAAmBW,CAAxB;AAAA,WADZ;AAEE,qBAAU,gBAFZ;AAGE,mBAAS,KAAKjB,kBAHhB;AAIE,eAAKY,EAJP;AAKE;AAAC,kCAAD;AAAA,YAAgB,UAAU;AAAA,qBAAK,OAAKM,YAAL,GAAoBD,CAAzB;AAAA,aAA1B,EAAsD,WAAU,iBAAhE;AACGJ;AADH,SALF;AAQE;AAAC,gCAAD;AAAA;AACE;AAAC,uCAAD;AAAA,cAAmB,WAAU,iBAA7B;AAAiDT,mBAAOW,WAAP,GAAqBC;AAAtE,WADF;AAEIZ,iBACEe,gBAAMC,YAAN,CAAoBC,uBAApB,EAAoC,EAAEC,WAAU,iBAAZ,EAA+Bf,OAAOgB,yBAAtC,EAApC,CADF,GAEEJ,gBAAMC,YAAN,CAAoBI,sBAApB,EAAmC,EAAEF,WAAU,iBAAZ,EAA+Bf,OAAOgB,yBAAtC,EAAnC;AAJN,SARF;AAeE;AAAC,8BAAD;AAAA;AACE,uBAAU,cADZ;AAEE,sBAAU;AAAA,qBAAK,OAAKb,cAAL,GAAsBO,CAA3B;AAAA,aAFZ;AAGGH,cAHH;AAIE,wCAAC,uBAAD;AAJF;AAfF,OADF;AAwBD;;;;EAzDyBW,gB;;kBA4Db3B,a","file":"item.js","sourcesContent":["import React, { Component } from 'react';\nimport { plusSymbolSVG, minusSymbolSVG } from './symbols';\nimport { blue, grey_medium } from '@time-with/colors'\nimport {\n  LI,\n  BottomPadding,\n  ContentDIV,\n  ToggleButton,\n  LabelParagraph,\n  ToggleButtonLabel,\n  toggleIconStyle,\n  baseRowHeight\n} from './elements'\n\nclass AccordionItem extends Component {\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      open: false,\n    }\n  }\n\n  handleElementClick = (e) => {\n    var isOpen = !this.state.open\n    this.setState({\n      open: isOpen\n    })\n    this.rootElement.style.height = isOpen ? `${baseRowHeight + this.contentElement.clientHeight}px`\n    : `${baseRowHeight}px`\n  }\n\n  render() {\n    const { open } = this.state\n    const { \n      id,\n      title,\n      html\n    } = this.props\n    let { \n      activeLabel,\n      inactiveLabel\n    } = this.props\n\n    if (!activeLabel) { activeLabel = 'close'}\n    if (!inactiveLabel) { inactiveLabel = 'open'}\n\n    return (\n      <LI\n        innerRef={c => this.rootElement = c}\n        className=\"accordion-item\" \n        onClick={this.handleElementClick}\n        key={id}>\n        <LabelParagraph innerRef={c => this.labelElement = c} className='highlight-hover'>\n          {title}\n        </LabelParagraph>\n        <ToggleButton>\n          <ToggleButtonLabel className='highlight-hover'>{ open ? activeLabel : inactiveLabel }</ToggleButtonLabel>\n          { open \n            ? React.cloneElement( minusSymbolSVG, { className:'highlight-hover', style: toggleIconStyle })\n            : React.cloneElement( plusSymbolSVG, { className:'highlight-hover', style: toggleIconStyle })\n          }\n        </ToggleButton>\n        <ContentDIV\n          className=\"item-content\"\n          innerRef={c => this.contentElement = c}>\n          {html}\n          <BottomPadding></BottomPadding>\n        </ContentDIV>\n      </LI>\n    );\n  }\n}\n\nexport default AccordionItem;\n\n\n"]}